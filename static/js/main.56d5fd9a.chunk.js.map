{"version":3,"sources":["stores/testStore.js","agent.js","stores/postStore.js","components/useStores.js","pages/ListPost.js","App.js","serviceWorker.js","index.js"],"names":["observable","action","e","testVal","target","value","console","log","uri","axios","get","postMarkdownList","postList","map","agent","getList","then","res","data","tree","forEach","x","path","endsWith","push","useStores","styles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Image","props","style","maxWidth","MakePostList","posts","post","source","transformImageUri","startsWith","renderers","image","Divider","ListPost","inject","observer","classes","this","postStore","length","getPostList","getMarkdownList","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","Container","React","Component","withStyles","App","Boolean","window","location","hostname","match","stores","testStore","_____APP_STATE_____","configure","enforceActions","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+OAWe,G,MAAA,I,4IARVA,K,wEAAqB,wB,kCAErBC,K,oFAAc,SAACC,GACZ,EAAKC,QAAUD,EAAEE,OAAOC,MACxBC,QAAQC,IAAI,EAAKJ,a,qBCMV,EATF,CACT,IAAO,SAACK,GACJ,OAAOC,IAAMC,IAAN,UAJE,0DAIF,OAAwBF,KAEnC,QAAW,WACP,OAAOC,IAAMC,IAAI,4ECoBV,M,4OAzBVV,K,wEAAsB,M,8CACtBA,K,wEAA8B,M,6CAC9BC,K,oFAAyB,WACtB,EAAKU,iBAAmB,EAAKC,SAASC,KAAI,SAAAL,GACtC,OAAOF,QAAQC,IAAIC,MAGvBF,QAAQC,IAAI,EAAKI,sB,yCAGpBV,K,oFAAqB,WAClBa,EAAWC,UACNC,KAAKf,aAAO,SAACgB,GACV,EAAKL,SAAW,GAChBK,EAAIC,KAAKC,KAAKC,SAAS,SAAAC,GAChBA,EAAEC,KAAKC,SAAS,QACf,EAAKX,SAASY,KAAKH,EAAEC,iB,2BCT9BG,I,mHCOTC,EAASC,aAAW,SAACC,GAAD,MAAY,CACpCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAId,SAASK,EAAMC,GACb,OAAO,yCAASA,EAAT,CAAgBC,MAAO,CAACC,SAAU,WAG3C,SAASC,EAAaH,GAEpB,OAAOA,EAAMI,MAAM3B,KAAI,SAAA4B,GAErB,OAAO,6BACL,kBAAC,IAAD,CACIC,OAAQD,EACRE,kBAAmB,SAAAnC,GAAG,OACpBA,EAAIoC,WAAW,QAAUpC,EAAzB,wEAAgGA,IAChGqC,UAAW,CAACC,MAAOX,KAG7B,kBAACY,EAAA,EAAD,U,IAQIC,EAFLC,YAAO,Y,GACPC,Y,yKAGG,IAAMC,EAAUzB,EAShB,OARoD,IAAjD0B,KAAKhB,MAAMiB,UAAU1C,iBAAiB2C,SACvCF,KAAKhB,MAAMiB,UAAUE,cACrBH,KAAKhB,MAAMiB,UAAUG,mBAGvBJ,KAAKhB,MAAMiB,UAAUG,kBAInB,yBAAKC,UAAWN,EAAQtB,MACtB,kBAAC6B,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQL,UAAWN,EAAQpB,WAAYgC,MAAM,UAAUC,aAAW,QACjF,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWN,EAAQjB,QAE5C,kBAACiC,EAAA,EAAD,CAAQJ,MAAM,WAAd,WAGJ,kBAACK,EAAA,EAAD,KACE,kBAAC7B,EAAD,CAAcC,MAAOY,KAAKhB,MAAMiB,UAAU1C,mBAE5C,6BACA,6BACA,sEACA,4BACE,8EACA,+EAGF,6BAEA,0DACA,4BACE,iEACA,oJACA,8JACA,qEACA,8FACA,mGACA,2H,GA5Ca0D,IAAMC,a,MAqDdC,cAAW7C,EAAX6C,CAAmBvB,GCjGnBwB,MARf,WACE,OACE,yBAAKf,UAAU,OACX,kBAAC,EAAD,Q,OCOYgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCAN,IAAMC,EAAS,CACbC,YACA1B,aAIFqB,OAAOM,oBAAsBF,EAG7BG,YAAU,CAAEC,eAAgB,WAE5BC,IAASC,OACP,kBAAC,IAAaN,EACZ,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJO,SAASC,eAAe,SDgGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzE,MAAK,SAAA0E,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvF,QAAQuF,MAAMA,EAAMC,a","file":"static/js/main.56d5fd9a.chunk.js","sourcesContent":["import { observable, action, reaction } from \"mobx\";\r\n\r\nclass TestStore{\r\n    @observable testVal = '초기값'\r\n\r\n    @action test = (e) => {\r\n        this.testVal = e.target.value\r\n        console.log(this.testVal)\r\n    }\r\n}\r\n\r\nexport default new TestStore()","import axios from 'axios'\r\n\r\nconst ROOT_URI = 'https://raw.githubusercontent.com/NoelBird/TIL/master/'\r\n\r\nconst Post = {\r\n    'get': (uri) => {\r\n        return axios.get(`${ROOT_URI}${uri}`)\r\n    },\r\n    'getList': () => {\r\n        return axios.get('https://api.github.com/repos/noelbird/TIL/git/trees/master?recursive=1')\r\n    }\r\n}\r\n\r\nexport default {\r\n    Post\r\n}","import { observable, action } from \"mobx\";\r\nimport agent from \"agent\";\r\n\r\nclass PostStore{\r\n    @observable postList = []\r\n    @observable postMarkdownList = []\r\n    @action getMarkdownList = () => {\r\n        this.postMarkdownList = this.postList.map(uri => {\r\n            return console.log(uri)\r\n            \r\n        })\r\n        console.log(this.postMarkdownList)\r\n    }\r\n\r\n    @action getPostList = () => {\r\n        agent.Post.getList()\r\n            .then(action((res) => {\r\n                this.postList = []\r\n                res.data.tree.forEach( x => {\r\n                    if(x.path.endsWith('.md')){\r\n                        this.postList.push(x.path)\r\n                    }\r\n                })\r\n            }))\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default new PostStore()","import React from 'react';\r\nimport { MobXProviderContext } from 'mobx-react';\r\n\r\n/**\r\n * React hooks를 사용하는 컴포넌트에서 store를 가져올 때 사용한다.\r\n * 참조) https://mobx-react.js.org/recipes-migration#hooks-for-the-rescue\r\n */\r\nfunction useStores() {\r\n  return React.useContext(MobXProviderContext);\r\n}\r\n\r\nexport default useStores;","import React from \"react\";\r\nimport useStores from \"components/useStores\";\r\nimport {\r\n  Button,\r\n  Container,\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  Divider,\r\n} from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport axios from 'axios'\r\n\r\nimport { observer, inject } from \"mobx-react\";\r\n\r\nconst styles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nfunction Image(props) {\r\n  return <img {...props} style={{maxWidth: '100%'}} />\r\n}\r\n\r\nfunction MakePostList(props){\r\n\r\n  return props.posts.map(post => {\r\n\r\n    return <div>\r\n      <ReactMarkdown\r\n          source={post}\r\n          transformImageUri={uri =>\r\n            uri.startsWith(\"http\") ? uri : `https://raw.githubusercontent.com/NoelBird/TIL/master/2020-09/${uri}`}\r\n            renderers={{image: Image}}\r\n            />\r\n\r\n  <Divider />\r\n      </div>\r\n  })\r\n  \r\n}\r\n\r\n@inject(\"postStore\")\r\n@observer\r\nclass ListPost extends React.Component{\r\n  render(){\r\n    const classes = styles\r\n    if(this.props.postStore.postMarkdownList.length === 0){\r\n      this.props.postStore.getPostList()\r\n      this.props.postStore.getMarkdownList()\r\n      \r\n    }\r\n    this.props.postStore.getMarkdownList()\r\n    \r\n\r\n    return(\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n            </Typography>\r\n            <Button color=\"inherit\">Login</Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Container>\r\n          <MakePostList posts={this.props.postStore.postMarkdownList}/>\r\n          \r\n        <br />\r\n        <br />\r\n        <h3>오늘 한 일(2020-09-07)</h3>\r\n        <ul>\r\n          <li>index page에서 mobx store 설정</li>\r\n          <li>markdown으로 보기 지원</li>\r\n        </ul>\r\n        \r\n        <br />\r\n\r\n        <h3>해야 할 일</h3>\r\n        <ul>\r\n          <li>markdown style 입히기</li>\r\n          <li>markdown으로 작성된 글들의 리스트 나열하는 기능!</li>\r\n          <li>웹페이지에서 글 쓰면 바로 깃에 커밋되게 만들기</li>\r\n          <li>로그인 페이지</li>\r\n          <li>포트폴리오 페이지 연결</li>\r\n          <li>noelbird.kr은 noelbird.github.io에 연결하기</li>\r\n          <li>글 쓰기 페이지, 글 보기 페이지(CRUD)</li>\r\n        </ul>\r\n        </Container>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(ListPost)","import React from 'react';\nimport ListPost from \"pages/ListPost\";\nfunction App() {\n  return (\n    <div className=\"App\">\n        <ListPost />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { BrowserRouter } from \"react-router-dom\";\n\n// mobx\nimport { configure } from \"mobx\";\nimport { Provider } from \"mobx-react\";\n\n// stores\nimport testStore from \"stores/testStore\";\nimport postStore from \"stores/postStore\";\n\nimport App from 'App';\nimport \"index.css\";\n\nimport * as serviceWorker from './serviceWorker';\n\nconst stores = {\n  testStore,\n  postStore,\n}\n\n// FOR easier debugging\nwindow._____APP_STATE_____ = stores\n\n// mobx4에서 useStrict를 사용하기 위한 코드\nconfigure({ enforceActions: \"always\" })\n\nReactDOM.render(\n  <Provider {...stores}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}