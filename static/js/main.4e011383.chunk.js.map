{"version":3,"sources":["stores/testStore.js","components/useStores.js","App.js","serviceWorker.js","index.js"],"names":["observable","action","e","testVal","target","value","console","log","useStores","React","useContext","MobXProviderContext","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Test","props","testStore","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","Container","App","Boolean","window","location","hostname","match","stores","_____APP_STATE_____","configure","enforceActions","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uQAWe,G,MAAA,I,4IARVA,K,wEAAqB,wB,kCAErBC,K,oFAAc,SAACC,GACZ,EAAKC,QAAUD,EAAEE,OAAOC,MACxBC,QAAQC,IAAI,EAAKJ,a,ICIVK,MAJf,WACE,OAAOC,IAAMC,WAAWC,M,yECKpBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAId,SAASK,EAAKC,GACUd,IAAbe,UADU,IAEXC,EAAUZ,IAChB,OACE,yBAAKa,UAAWD,EAAQT,MACtB,kBAACW,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQL,UAAWD,EAAQP,WAAYc,MAAM,UAAUC,aAAW,QACjF,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWD,EAAQJ,OAA5C,SAGA,kBAACe,EAAA,EAAD,CAAQJ,MAAM,WAAd,WAGJ,kBAACK,EAAA,EAAD,KACA,6BACA,6BACA,0DACA,4BACE,+GACA,iDACA,yDAEF,6BAEA,0DACA,4BACE,8EACA,8JACA,qEACA,iFACA,mGACA,uHAgBKC,MARf,WACE,OACE,yBAAKZ,UAAU,OACX,kBAACJ,EAAD,Q,MC1DYiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCDN,IAAMC,EAAS,CACbpB,aAIFgB,OAAOK,oBAAsBD,EAG7BE,YAAU,CAAEC,eAAgB,WAE5BC,IAASC,OACP,kBAAC,IAAaL,EACZ,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJM,SAASC,eAAe,SDkGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.4e011383.chunk.js","sourcesContent":["import { observable, action, reaction } from \"mobx\";\r\n\r\nclass TestStore{\r\n    @observable testVal = '초기값'\r\n\r\n    @action test = (e) => {\r\n        this.testVal = e.target.value\r\n        console.log(this.testVal)\r\n    }\r\n}\r\n\r\nexport default new TestStore()","import React from 'react';\r\nimport { MobXProviderContext } from 'mobx-react';\r\n\r\n/**\r\n * React hooks를 사용하는 컴포넌트에서 store를 가져올 때 사용한다.\r\n * 참조) https://mobx-react.js.org/recipes-migration#hooks-for-the-rescue\r\n */\r\nfunction useStores() {\r\n  return React.useContext(MobXProviderContext);\r\n}\r\n\r\nexport default useStores;","import React from 'react';\nimport useStores from \"./components/useStores\";\nimport {\n  Button,\n  Container,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction Test(props){\n    const {testStore} = useStores()\n    const classes = useStyles();\n    return(\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Space\n            </Typography>\n            <Button color=\"inherit\">Login</Button>\n          </Toolbar>\n        </AppBar>\n        <Container>\n        <br />\n        <br />\n        <h3>오늘 한 일</h3>\n        <ul>\n          <li>react 프로젝트 만들어서 github page연결</li>\n          <li>mobx 설치</li>\n          <li>material-ui 설치</li>\n        </ul>\n        <br />\n\n        <h3>해야 할 일</h3>\n        <ul>\n          <li>index page에서 mobx store 설정</li>\n          <li>웹페이지에서 글 쓰면 바로 깃에 커밋되게 만들기</li>\n          <li>로그인 페이지</li>\n          <li>포트폴리오 페이지</li>\n          <li>noelbird.kr은 noelbird.github.io에 연결하기</li>\n          <li>글 쓰기 페이지, 글 보기 페이지(CRUD)</li>\n        </ul>\n        </Container>\n        \n      </div>\n    )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Test />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { BrowserRouter } from \"react-router-dom\";\n\n// mobx\nimport { configure } from \"mobx\";\nimport { Provider } from \"mobx-react\";\n\n// stores\nimport testStore from \"./stores/testStore\";\n\nimport App from './App';\nimport \"./index.css\";\n\nimport * as serviceWorker from './serviceWorker';\n\nconst stores = {\n  testStore,\n}\n\n// FOR easier debugging\nwindow._____APP_STATE_____ = stores\n\n// mobx4에서 useStrict를 사용하기 위한 코드\nconfigure({ enforceActions: \"always\" })\n\nReactDOM.render(\n  <Provider {...stores}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}